
--
script.on_event(defines.events.on_player_used_capsule, function(event)
  local player = game.get_player(event.player_index)
  local item = event.item
  local position = event.position
  -- ABORT IF CAPSULE WAS NOT FLINT & STEEL
  if item.name ~= "flint-and-steel" then
    return
  end
  -- ABORT IF FLINT & STEEL WAS NOT USED ON OBSIDIAN
  local clicked_obsidian = find_obsidian(player, position)
  if not clicked_obsidian[1] then
    return
  else
    -- -- TRAVEL NORTH, EAST, SOUTH, WEST ALONG ALL NEIGHBORING OBSIDIANS UNTIL ARRIVE AT ORIGINAL CLICKED_OBSIDIAN POSITION. ABORT IF ANY STEP FINDS MORE OR LESS THAN 2 NEIGHBORS.
    -- local neighbor_obsidians = find_neighbors(player, position)
    -- if neighbor_obsidians.north[1] and (neighbor_obsidians.count >= 2) then
    --   -- go north
    -- elseif neighbor_obsidians.east[1] and (neighbor_obsidians.count >= 2) then
    --   -- go east
    -- elseif neighbor_obsidians.south[1] and (neighbor_obsidians.count >= 2) then
    --   -- go south
    -- elseif neighbor_obsidians.west[1] and (neighbor_obsidians.count >= 2) then
    --   -- go south
    -- end
    -- FIGURE OUT WIDTH AND HEIGHT OF PORTAL PERIMITER
    local neighbor_obsidians = find_neighbors(player, position)
    -- MAKE SURE CLICKED_OBSIDIAN HAS AT LEAST 2 NEIGHBORS
    if (neighbor_obsidians.count < 2) then
      return
    end
    -- PLAYER CLICKED SW CORNER
    if neighbor_obsidians.north[1] and neighbor_obsidians.east[1] then
      local width = calculate_width(player, position)
      local height = calculate_height(player, position)
      local center_position = {
        x = position.x + (width/2),
        y = position.y + (height/2),
      }
    -- PLAYER CLICKED SE CORNER
    elseif neighbor_obsidians.north[1] and neighbor_obsidians.west[1] then
      local width = calculate_width(player, position)
      local height = calculate_height(player, position)
      local center_position = {
        x = position.x - (width/2),
        y = position.y + (height/2),
      }
    -- PLAYER CLICKED NE CORNER
    elseif neighbor_obsidians.south[1] and neighbor_obsidians.west[1] then
      local width = calculate_width(player, position)
      local height = calculate_height(player, position)
      local center_position = {
        x = position.x - (width/2),
        y = position.y - (height/2),
      }
    -- PLAYER CLICKED NW CORNER
    elseif neighbor_obsidians.south[1] and neighbor_obsidians.east[1] then
      local width = calculate_width(player, position)
      local height = calculate_height(player, position)
      local center_position = {
        x = position.x + (width/2),
        y = position.y - (height/2),
      }
    -- PLAYER CLICKED ON HORIZONTAL
    elseif neighbor_obsidians.east[1] and neighbor_obsidians.west[1] then
      calculate_width()
      calculate_height()
    -- PLAYER CLICKED ON VERTICAL
    elseif neighbor_obsidians.north[1] and neighbor_obsidians.south[1] then
      calculate_width()
      calculate_height()
    end
  end
end)

function find_obsidian(player, position)
  local obsidian = player.surface.find_entities_filtered{
    position = position,
    name = "obsidian",
  }
  return obsidian
end

function find_neighbors(player, position)
  local neighbor_positions = {
    north = {position.x, position.y+1},
    east = {position.x+1, position.y},
    south = {position.x, position.y-1},
    west = {position.x-1, position.y},
  }
  local neighbor_obsidians = {
    north = find_obsidian(player, neighbor_positions.north),
    east = find_obsidian(player, neighbor_positions.east),
    south = find_obsidian(player, neighbor_positions.south),
    west = find_obsidian(player, neighbor_positions.west),
  }
  local count = 0
  for a,b in pairs(neighbor_obsidians) do
    if b[1] then
      count = count + 1
    end
  end
  neighbor_obsidians.count = count
  return neighbor_obsidians
end

function calculate_width(player, position)
  local east_width = 0
  local west_width = 0
  -- COUNT OBSIDIANS EAST OF CLICKED_OBSIDIAN
  for i = 1,64 do
    local search_position = {x = position.x+i, y = position.y}
    if find_obsidian(player, search_position)[1] then
      east_width = east_width + 1
    else
      break
    end
  end
  -- COUNT OBSIDIANS WEST OF CLICKED_OBSIDIAN
  for i = 1,64 do
    local search_position = {x = position.x-i, y = position.y}
    if find_obsidian(player, search_position)[1] then
      west_width = west_width + 1
    else
      break
    end
  end
  local total_width = west_width + 1 + east_width
  return total_width
end

function calculate_height(player, position)
  local north_height = 0
  local south_height = 0
  -- COUNT OBSIDIANS NORTH OF CLICKED_OBSIDIAN
  for i = 1,64 do
    local search_position = {x = position.x, y = position.y+i}
    if find_obsidian(player, search_position)[1] then
      north_height = north_height + 1
    else
      break
    end
  end
  -- COUNT OBSIDIANS SOUTH OF CLICKED_OBSIDIAN
  for i = 1,64 do
    local search_position = {x = position.x, y = position.y-i}
    if find_obsidian(player, search_position)[1] then
      south_height = south_height + 1
    else
      break
    end
  end
  local total_width = north_height + 1 + south_height
  return total_width
end

-- function crawl_perimeter(player, neighbor_obsidians)
--   if neighbor_obsidians.count ~= 2 then
--     return
--   end
--   if neighbor_obsidians.north[1] then
--     -- go north
--   elseif neighbor_obsidians.east[1] then
--     -- go east
--   elseif neighbor_obsidians.south[1] then
--     -- go south
--   elseif neighbor_obsidians.west[1] then
--     -- go south
--   end
